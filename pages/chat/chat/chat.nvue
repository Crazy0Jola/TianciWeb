<template>
	<view>

		<!-- 导航栏 -->
		<free-nav-bar :title="nickname" :noreadnum="1" showBack>
			<free-icon-button slot="right" 
			:icon="'\ue636'"
			@click="openChatSet"></free-icon-button>
		</free-nav-bar>
		
		<!-- 聊天内容区域 -->
		<scroll-view scroll-y class="bg-light position-fixed left-0 right-0 px-3" style="bottom: 105rpx;" :style="chatBodyBottom" :show-scrollbar="false"
		@click="clickPage">
			
			<!-- 聊天信息列表组件 -->
			<block v-for="(item,index) in list" :key="index">
				<free-chat-item :item="item" :avator="avator" :myUsername="myUsername" :myAvator="myAvator" :index="index" ref="chatItem"
				:pretime=" index > 0 ? list[index-1].create_time : 0"
				@long="long" @preview="previewImage"></free-chat-item>
			</block>
		</scroll-view>
		
		<!-- #ifdef APP-PLUS-NVUE -->
		<div v-if="mode === 'action' || mode === 'emoticon'"
		class="position-fixed top-0 right-0 left-0"
		:style="'bottom:'+maskBottom+'px;'"
		@click="clickPage"></div>
		<!-- #endif -->
		
		<!-- 底部输入框 -->
		<view class="position-fixed left-0 right-0 border-top flex align-center" style="background-color: #F7F7F6;height: 105rpx;" 
		:style="'bottom:'+KeyboardHeight+'px;'">
			<free-icon-button :icon="(mode === 'audio') ? '\ue618':'\ue656'" @click="changeVoiceOrText"></free-icon-button>
			<view class="flex-1">
				<view v-if="mode === 'audio'" class="rounded flex align-center justify-center" style="height: 80rpx;" :class="isRecording?'bg-hover-light':'bg-white'" @touchstart="voiceTouchStart" @touchend="voiceTouchEnd" @touchcancel="voiceTouchCancel" @touchmove="voiceTouchMove">
					<text class="font">{{isRecording ? '松开 结束':'按住 说话'}}</text>
				</view>
				
				<textarea v-else fixed class="bg-white rounded p-2 font-md" style="height: 80rpx;" :adjust-position="false" v-model="text" @focus="mode = 'text'"/>
			</view>
			<!-- 表情 -->
			<free-icon-button :icon="'\ue60d'"
			@click="openActionOrEmoticon('emoticon')"></free-icon-button>
			<template v-if="text.length === 0">
				<!-- 扩展菜单 -->
				<free-icon-button :icon="'\ue636'" 
				@click="openActionOrEmoticon('action')"></free-icon-button>
			</template>
			<template v-else>
				<!-- 发送按钮 -->
				<free-main-button name="发送" 
				@click="send('text')"></free-main-button>
			</template>
			
		</view>
	
	<!-- 扩展菜单 -->
	<free-popup ref="action" bottom transformOrigin="center bottom" @hide="KeyboardHeight = 0" :mask="false">
		<view style="height: 580rpx;" class="border-top border-light-secondary bg-light">
			<swiper :indicator-dots="emoticonOrActionList.length > 1" style="height: 510rpx;">
				<swiper-item class="row" 
				v-for="(item,index) in emoticonOrActionList"
				:key="index">
					<view class="col-3 flex flex-column align-center justify-center" style="height: 255rpx;" v-for="(item2,index2) in item" :key="index2" @click="actionEvent(item2)">
						<image :src="item2.icon" mode="widthFix"
						style="width: 100rpx;height: 100rpx;"></image>
						<text class="font-sm text-muted mt-2"
						>{{item2.name}}</text>
					</view>
				</swiper-item>
			</swiper>
		</view>
	</free-popup>
	
	
	<!-- 弹出层 -->
	<free-popup ref="extend" :bodyWidth="240" :bodyHeight="getMenusHeight"
	:tabbarHeight="105">
		<view class="flex flex-column" 
		style="width: 240rpx;"
		:style="getMenusStyle">
			<view class="flex-1 flex align-center" 
			v-for="(item,index) in menusList"
			:key="index"
			@click="clickEvent(item.event)">
				<text class="font-md pl-3">{{item.name}}</text>
			</view>
		</view>
	</free-popup>
	
	
	<!-- 录音提示 -->
	<view v-if="isRecording" class="position-fixed top-0 left-0 right-0 flex align-center justify-center" style="bottom: 105rpx;">
		<view style="width: 360rpx;height: 360rpx;background-color: rgba(0,0,0,0.5);" class="rounded flex flex-column align-center justify-center">
			<image src="/static/audio/recording.gif" style="width: 150rpx;height: 150rpx;"></image>
			<text class="font text-white mt-3">{{unRecord ? '松开手指，取消发送':'手指上滑，取消发送'}}</text>
		</view>
	</view>
	
	</view>
</template>

<script>
	// #ifdef APP-PLUS-NVUE
	const dom = weex.requireModule('dom')
	// #endif
	
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeIconButton from "@/components/free-ui/free-icon-button.vue"
	import freeChatItem from '@/components/free-ui/free-chat-item.vue';
	import freePopup from "@/components/free-ui/free-popup.vue"
	import freeMainButton from '@/components/free-ui/free-main-button.vue';
	
	
	import { mapState,mapMutations } from 'vuex'
	var _this;
	var JIM = getApp().globalData.JIM;
	export default {
		components: {
			freeNavBar,
			freeIconButton,
			freeChatItem,
			freePopup,
			freeMainButton
		},
		data() {
			return {
				// 模式 text输入文字，emoticon表情，action操作，audio音频
				mode:"text",
				tempurl:"",
				username:"",
				nickname:"",
				avator:"/static/images/userpic.jpg",
				myUsername:"",
				myAvator:"/static/images/userpic.jpg",
				// 扩展菜单列表
				actionList:[
					[{
						name:"相册",
						icon:"/static/images/extends/pic.png",
						event:"uploadImage"
					},{
						name:"拍摄",
						icon:"/static/images/extends/video.png",
						event:"uploadVideo"
					},{
						name:"收藏",
						icon:"/static/images/extends/shoucan.png",
						event:""
					},{
						name:"名片",
						icon:"/static/images/extends/man.png",
						event:""
					},{
						name:"语音通话",
						icon:"/static/images/extends/phone.png",
						event:""
					},{
						name:"位置",
						icon:"/static/images/extends/path.png",
						event:""
					}]
				],
				emoticonList:[],
				// 键盘高度
				KeyboardHeight:0,
				menus:[{ 
					name:"复制",
					event:'',
				},{ 
					name:"删除",
					event:''
				},{ 
					name:"撤回",
					event:'removeChatItem'
				}],
				navBarHeight:0,
				list:[],
				// 当前操作的气泡索引
				propIndex:-1,
				// 输入文字
				text:"",
				
				// 音频录制状态
				isRecording:false,
				RecordingStartY:0,
				// 取消录音
				unRecord:false
			}
		},
		onLoad:function(e){
			uni.$on("get_chat_msg",function(){
				console.log("===================有新消息来啦=====================")
				var msg = uni.getStorageSync(_this.username);
				_this.list=msg;
				var pageToBottomTimer = setTimeout(()=>{
					_this.pageToBottom()
					clearTimeout(pageToBottomTimer)
				},200)
			})
			var pageToBottomTimer = setTimeout(()=>{
				_this.pageToBottom()
				clearTimeout(pageToBottomTimer)
			},500)
			_this=this;
			_this.username = e.username;
			_this.nickname = e.nickname;
			_this.myUsername = uni.getStorageSync('setUserData').username;
		},
		onUnload(){
			console.log("=================onUnload==================")
			uni.$off("get_chat_msg")
		},
		onShow(){			
			console.log("chat__________________onSHow")
			// var imagepath=_this.image_cache("https://img.jiguang.cn/im-portal/0.0.1/assets/img/jverify-flow-banner-new.png","a");
			// var p = plus.io.convertLocalFileSystemURL(imagepath);  
			// console.log(p)
			var msg = uni.getStorageSync(_this.username);
			JIM.resetUnreadCount({
				'username' : _this.username
			});
			if(msg){
				_this.list=msg;		
				// var pageToBottomTimer = setTimeout(()=>{
				// 	_this.pageToBottom()
				// 	clearTimeout(pageToBottomTimer)
				// },500)
			}else{
				console.log("hhhhhhhhhhhh")
				var now = new Date()
				var past = new Date(new Date()-86400000*7)
				
				var now_year = now.getFullYear();
				var now_month = now.getMonth()+1;
				var now_day = now.getDate();
				var now_hour = now.getHours();
				var now_minutes = now.getMinutes();
				var now_seconds = now.getSeconds();
				
				if(now_month<10){
					now_month="0"+now_month;
				}
				if(now_day<10){
					now_day="0"+now_day;
				}
				if(now_hour<10){
					now_hour="0"+now_hour;
				}
				if(now_minutes<10){
					now_minutes="0"+now_minutes;
				}
				if(now_seconds<10){
					now_seconds="0"+now_seconds;
				}
				var now_date = now_year+"-"+now_month+"-"+now_day+"%20"+now_hour+":"+now_minutes+":"+now_seconds
				
				var past_yaer = past.getFullYear();
				var past_month = past.getMonth()+1;
				var past_day = past.getDate();
				var past_hour = past.getHours();
				var past_minutes = past.getMinutes();
				var past_seconds = past.getSeconds();
				if(past_month<10){
					past_month="0"+past_month;
				}
				if(past_day<10){
					past_day="0"+past_day;
				}
				if(past_hour<10){
					past_hour="0"+past_hour;
				}
				if(past_minutes<10){
					past_minutes="0"+past_minutes;
				}
				if(past_seconds<10){
					past_seconds="0"+past_seconds;
				}
				var past_date = past_yaer+"-"+past_month+"-"+past_day+"%20"+past_hour+":"+past_minutes+":"+past_seconds
				
				uni.showLoading({
					"title":"正在获取聊天记录..."
				})
				uni.request({
					url: 'https://report.im.jpush.cn/v2/users/' + _this.username +
						'/messages?count=1000&begin_time='+past_date+'&end_time='+now_date,
					header: {
						"Authorization": 'Basic MDk5NzA4NzZmMzNlODg0YTM2MjQzMzVjOmU4ZTg3M2U2MDI0NTMxNWE3MGVkZTRiMg=='
					},
					success(res) {
						var msg = res.data.messages
						// msg.forEach(function(item){
						// 	if(item.msg_type=="image"){
						// 		JIM.getResource({'media_id' :item.msg_body.media_id}).onSuccess(function(data){
						// 			item.msg_body.media_id = data.url;
						// 			console.log('success:' + JSON.stringify(data));
						// 		}).onFail(function(data){
						// 			console.log('error:' + JSON.stringify(data));
						// 		});
						// 	}	
						// })
											
						_this.$data.list=msg;
					
						_this.$data.list.map(function(elem,index){
						    if(elem.msg_type!="text"){
						    	_this.setPic(elem.msg_body.media_id,index);
						    }
						})
						uni.setStorageSync(_this.username,_this.$data.list);
						_this.pageToBottom();
						uni.hideLoading()					
												
					}
				})
			}
			// var phone=[];
			// phone.push("18952158867");
			// phone.push("18012018031");
			// uni.request({
			// 	url: 'http://117.83.152.39:8081/interconnect/appUser/getUserPhotoByPhone',
			// 	header: {
			// 		"token": '06874c8b7be14969abac9a18935b18b8',
			// 		"Content-Type":"application/json"
			// 	},
			// 	method:"POST",
			// 	data:{
			// 		// phones:JSON.stringify(phone)
			// 	},
			// 	success(res) {
			// 		console.log(res)
			// 	}
			// })
		},
		mounted() {
			// #ifdef APP-PLUS-NVUE
			var statusBarHeight = plus.navigator.getStatusbarHeight()
			// #endif
			this.navBarHeight = statusBarHeight + uni.upx2px(90)
			
			// 监听键盘高度变化
			uni.onKeyboardHeightChange(res => {
			  if (this.mode !== 'action' && this.mode !== 'emoticon') {
			  	this.KeyboardHeight = res.height 
			  }
			  if (this.KeyboardHeight > 0) {
			  	this.pageToBottom()
			  }
			})
			
			
			// 注册发送音频事件
			this.regSendVoiceEvent((url)=>{
				if (!this.unRecord) {
					this.send('audio',url,{
						time:this.RecordTime
					})
				}
			})
		},
		computed: {
			...mapState({
				RECORD:state=>state.audio.RECORD,
				RecordTime:state=>state.audio.RecordTime
			}),
			// 获取蒙版的位置
			maskBottom(){
				return this.KeyboardHeight + uni.upx2px(105)
			},
			// 动态获取菜单高度
			getMenusHeight(){
				let H = 100
				return this.menus.length * H
			},
			// 获取菜单的样式
			getMenusStyle(){
				return `height: ${this.getMenusHeight}rpx;`
			},
			// 判断是否操作本人信息
			isdoSelf(){
				let target_id = _this.propIndex > -1 ? _this.list[_this.propIndex].target_id : 0
				return target_id !== _this.myUsername
			},
			// 获取操作菜单
			menusList(){
				return this.menus.filter(v=>{
					if (v.name === '撤回' && !this.isdoSelf) {
						return false
					} else {
						return true
					}
				})
			},
			// 聊天区域bottom
			chatBodyBottom(){
				return `bottom:${uni.upx2px(105) + this.KeyboardHeight}px;top:${this.navBarHeight}px;`
			},
			// 获取操作或者表情列表
			emoticonOrActionList(){
				return (this.mode === 'emoticon' || this.mode === 'action') ? this[this.mode+'List'] : []
			},
			// 所有信息的图片地址
			imageList(){
				let arr = []
				this.list.forEach((item)=>{
					if (item.type === 'emoticon' || item.type === 'image') {
						arr.push(item.data)
					}
				})
				return arr
			}
		},
		watch: {
			mode(newValue, oldValue) {
				if (newValue !== 'action' && newValue !== 'emoticon') {
					this.$refs.action.hide()
				}
				if (newValue !== 'text') {
					uni.hideKeyboard()
				}
			}
		},
		created() {
			// 初始化
			this.__init()
		},
		onBackPress(options){
			console.log(options)
			console.log(JSON.stringify(options))
			if(options.from==='backbutton'||options.from==='navigateBack'){
				console.log("hhhh")
				uni.switchTab({
					url:"../../tabbar/index/index"
				})
				return true;
			}
		},
		methods: {
			...mapMutations(['regSendVoiceEvent']),
			__init(){
				var total = 20
				var page = Math.ceil(total/8)
				var arr = []
				for (var i = 0; i < page; i++) {
					var start = i*8
					arr[i] = []
					for (var j = 0; j < 8; j++) {
						var no = start + j
						if ((no+1) > total) {
							continue;
						}
						arr[i].push({
							name:"表情"+no,
							icon:"/static/images/emoticon/5497/"+no+'.gif',
							event:"sendEmoticon"
						})
					}
				}
				this.emoticonList = arr
			},
			setPic(media_id,index){
				JIM.getResource({'media_id' :media_id}).onSuccess(function(data){
					uni.downloadFile({
						url: data.url,
						success: (res) => {
							if (res.statusCode === 200) {	
								uni.saveFile({
									tempFilePath: res.tempFilePath,
									success: function (res) {
										var savedFilePath = plus.io.convertLocalFileSystemURL(res.savedFilePath);
										_this.$data.list[index].msg_body.media_id=savedFilePath;
										uni.setStorageSync(_this.username,_this.$data.list);									
									}
								});
							}
						}
					}); 
				}).onFail(function(data){
					uni.showToast({
						"title":getCodeMsg(data.code),
						"position":bottom
					})
				});		
			},
			// 打开扩展菜单或者表情包
			openActionOrEmoticon(mode = 'action'){
				this.mode = mode
				this.$refs.action.show()
				
				uni.hideKeyboard()
				this.KeyboardHeight = uni.upx2px(580)
			},
			// 发送
			send(type, data = '',options = {}){
				var _that = this;
				var text = this.text
				var latest_msg;
				if(type=="image"||type=="audio"||type=="video"){
					uni.saveFile({
						tempFilePath: data,
						success: function (res) {
							data = plus.io.convertLocalFileSystemURL(res.savedFilePath);
							console.log(data)
						}
					});
				}
				console.log(type+"====="+data)
				switch (type){
					case 'text':
					latest_msg = text;
					JIM.sendSingleMsg({
						'target_username' : _this.username,
						'content' : text,
						"extras": {
							'isremove':false
						},
					}).onSuccess(function(data) {
						var obj = {
							"from_id": _this.myUsername,
							"create_time": (new Date()).getTime(),				
							"msg_type": type,
							"target_id": _this.username,
							"msg_id":data.msg_id,
							"msg_body":{
								"extras": {'isremove':false},
								"text": text
							}
						}
						_this.list.push(obj)
						
						// 发送文字成功，清空输入框
						if (type === 'text') {
							_that.text = ''
						}
						// 置于底部
						var pageToBottomTimer = setTimeout(()=>{
							_this.pageToBottom()
							clearTimeout(pageToBottomTimer)
						},200)
						
						JIM.updateConversation({
						   'username' : _this.username,
						   'extras' : {'latest_msg':latest_msg}
						});
						
						uni.setStorageSync(_this.username,_this.list);
					
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":bottom
						})
						//data.code 返回码
						//data.message 描述
					});
						break;
						
					case 'image':
					uni.showLoading({
						"title":"图片资源较大，发送中请稍候..."
					})
					latest_msg = "[图片]";
					JIM.sendSinglePic({
						'target_username' : _this.username,
						'image' : data, //设置图片参数
						"extras": {
							'isremove':false,
						},
					}).onSuccess(function(res,msg) {
						console.log(JSON.stringify(msg)+"===================")
						var obj = {
							"from_id": _this.myUsername,
							"create_time": (new Date()).getTime(),				
							"msg_type": type,
							"target_id": _this.username,
							"msg_id":res.msg_id,
							"msg_body":{
								"media_id": data,
								"extras": {
									'isremove':false,
								},
							},
							"my":true,
							"data":data,
						}
						_this.list.push(obj)
						uni.hideLoading()
						// 置于底部
						var pageToBottomTimer = setTimeout(()=>{
							_this.pageToBottom()
							clearTimeout(pageToBottomTimer)
						},200)
						
						JIM.updateConversation({
						   'username' : _this.username,
						   'extras' : {'latest_msg':latest_msg}
						});
						
						uni.setStorageSync(_this.username,_this.list);
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":bottom
						})
					});
						break;		
								
					case 'audio':
					if(options.time<=2){
						uni.showToast({
							title:"说话时间太短啦",
							icon:"none"
						})
						break;
					}
					latest_msg = "[语音]";
					JIM.sendSingleFile({
						'target_username' : _this.username,
						'file' : data ,//设置图片参数
						'extras':{
							'isremove':false,
							'time':options.time,
							'isAudio':true
						}
					}).onSuccess(function(res,msg) {
						console.log(JSON.stringify(msg)+"===================")
						var obj = {
							"from_id": _this.myUsername,
							"create_time": (new Date()).getTime(),				
							"msg_type": "file",
							"target_id": _this.username,
							"msg_id":res.msg_id,
							"msg_body":{		
								"media_id":data,
								"extras": {
									'isremove':false,
									'time':options.time,
									'isAudio':true
								}
							},
							"my":true,
							"data":data,
						}
						_this.list.push(obj)
						
						// 置于底部
						var pageToBottomTimer = setTimeout(()=>{
							_this.pageToBottom()
							clearTimeout(pageToBottomTimer)
						},200)
						
						JIM.updateConversation({
						   'username' : _this.username,
						   'extras' : {'latest_msg':latest_msg}
						});
						
						uni.setStorageSync(_this.username,_this.list);
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":bottom
						})
					});
						break;	
						
					case 'emoticon':
					latest_msg = "[表情]";
					JIM.sendSingleMsg({
						'target_username' : _this.username,
						'content' : '[表情]',
						'extras' :{
							"emotion":data,
							"isEmotion":true,
							"isremove":false
						}
					}).onSuccess(function(res) {
						var obj = {
							"from_id": _this.myUsername,
							"create_time": (new Date()).getTime(),				
							"msg_type": "text",
							"target_id": _this.username,
							"msg_body":{
								"text":"[表情]",
								'extras' :{
									"emotion":data,
									"isEmotion":true,
									"isremove":false
								},
							},
							"my":true,
							"data":data,
						}		
						
						_this.list.push(obj)				
						
						// 置于底部
						var pageToBottomTimer = setTimeout(()=>{
							_this.pageToBottom()
							clearTimeout(pageToBottomTimer)
						},200)
						
						JIM.updateConversation({
						   'username' : _this.username,
						   'extras' : {'latest_msg':latest_msg}
						});
						
						uni.setStorageSync(_this.username,_this.list);
					
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":bottom
						})
					});
									
						break;
						
						
					case 'video':
					uni.showLoading({
						"title":"视频资源较大，发送中请稍候..."
					})
					latest_msg = "[短视频]";
					
					JIM.sendSingleVedio({
						'target_username' : _this.username,
						'file' : data ,//设置图片参数
						"extras": {
							"video": "mp4",
							'isremove':false,
							"isVideo":true
						},
					}).onSuccess(function(res,msg) {
						console.log(JSON.stringify(msg)+"===================")
						var obj = {
							"from_id": _this.myUsername,
							"create_time": msg.content.create_time,		
							"msg_type": "file",
							"target_id": _this.username,
							"msg_id":res.msg_id,
							"msg_body":{
								"media_id":data,
								"extras": {
									"video": "mp4",
									'isremove':false,
									"isVideo":true
								}
							},
							"my":true,
							"data":data,
						}
						_this.list.push(obj)
						
						uni.hideLoading()
						
						// 置于底部
						var pageToBottomTimer = setTimeout(()=>{
							_this.pageToBottom()
							clearTimeout(pageToBottomTimer)
						},200)
						
						JIM.updateConversation({
						   'username' : _this.username,
						   'extras' : {'latest_msg':latest_msg}
						});
						
						uni.setStorageSync(_this.username,_this.list);
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":"bottom"
						})
					});
						break;	
				}
	   		   
			},
			// 回到底部
			pageToBottom(){
				_this=this;
				// #ifdef APP-PLUS-NVUE
				console.log("pageToBottom")
				this.$nextTick(()=>{
					let chatItem = _this.$refs.chatItem
					let lastIndex = chatItem.length > 0 ? chatItem.length - 1 : 0
					if (chatItem[lastIndex]) {
						dom.scrollToElement(chatItem[lastIndex],{})
					}
				})
				// #endif
			},
			// 长按消息气泡
			long({x,y,index}){
				// 初始化 索引
				this.propIndex = index
				// 显示扩展菜单
				this.$refs.extend.show(x,y)
			},
			// 操作菜单方法分发
			clickEvent(event){
				switch (event){
					case 'removeChatItem': // 撤回消息
					// 拿到当前被操作的信息
					if (this.propIndex > -1) {
						this.list[this.propIndex].msg_body.extras.isremove = true
					}
						break;
					default:
						break;
				}
				// 关闭菜单
				this.$refs.extend.hide()
			},
			// 扩展菜单
			actionEvent(e){
				switch (e.event){
					case 'uploadImage': // 选择相册
					uni.chooseImage({
						count:9,
						sizeType:['compressed'],
						success: (res) => {
							// 发送到服务器
							// 渲染到页面
							res.tempFilePaths.forEach((item)=>{
								this.send('image',item)							
							})
						}
					})
						break;
					case 'uploadVideo': // 发送短视频
					uni.chooseVideo({
						maxDuration:10,
						success:(res)=>{
							if(res.duration>11){
								uni.showToast({
									"title":"请选择10s以内的短视频！"
								})
								return;
							}
							console.log(res)
							this.send('video',res.tempFilePath)
							
							// 渲染页面
							// 发送到服务端（获取视频封面，返回url）
							// 修改本地的发送状态
						}
					})
						break;
					case 'sendEmoticon': // 发送表情包
					this.send('emoticon',e.icon)
						break;
				}
			},
			// 点击页面
			clickPage(){
				this.mode = ''
			},
			// 预览图片
			previewImage(url){
				var reUrl = plus.io.convertAbsoluteFileSystem(url);
				uni.previewImage({
					current:reUrl,
					urls:[reUrl],
					indicator:"default"
				})
			},
			// 切换音频录制和文本输入
			changeVoiceOrText(){
				this.mode = this.mode !== 'audio' ? 'audio' : 'text'
			},
			// 录音相关
			// 录音开始
			voiceTouchStart(e){ 
				// 初始化
				this.isRecording = true
				this.RecordingStartY = e.changedTouches[0].screenY
				this.unRecord = false
				// 开始录音
				this.RECORD.start({
					format:"mp3"
				})
			},
			// 录音结束
			voiceTouchEnd(){
				this.isRecording = false
				// 停止录音
				this.RECORD.stop()
			},
			// 录音被打断
			voiceTouchCancel(){
				this.isRecording = false
				this.unRecord = true
				// 停止录音
				this.RECORD.stop()
			},
			voiceTouchMove(e){
				let Y = Math.abs(e.changedTouches[0].screenY - this.RecordingStartY)
				this.unRecord = (Y >= 50)
			},
			// 打开聊天信息设置
			openChatSet(){
				uni.navigateTo({
					url: '../chat-set/chat-set',
				});
			}
		}
	}
</script>

<style>

</style>
