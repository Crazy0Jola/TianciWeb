<template>
	<view>
		
		
		<!-- 导航栏 -->
		<free-nav-bar title="国政通" :noreadnum="1">
		</free-nav-bar>
		
		<view class="noConversation" v-if="list.length==0">
			<view>
				<text class="iconfont text-gray text-center" style="font-size: 200rpx;">&#xe662;</text>
			</view>
			<view>
				<text class=" font-md text-gray text-center">暂无会话</text>
			</view>
		</view>
		
		<!-- 置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="isTop(item.gid||item.username)&&!item.extras.del" :item="item" :index="index"
			@long="long"></free-media-list>
		</block>
		
		<!-- 非置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="!isTop(item.gid||item.username)&&!item.extras.del" :item="item" :index="index"
			@long="long"></free-media-list>
		</block>
		
		
		<!-- 弹出层 -->
		<free-popup ref="extend" :bodyWidth="240" :bodyHeight="getMenusHeight">
			<view class="flex flex-column" 
			style="width: 240rpx;"
			:style="getMenusStyle">
				<view class="flex-1 flex align-center" 
				v-for="(item,index) in menus"
				:key="index"
				@click="clickEvent(item.event)">
					<text class="font-md pl-3">{{item.name}}</text>
				</view>
			</view>
		</free-popup>
		
		
	</view>
</template>

<script>
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeMediaList from "@/components/free-ui/free-media-list.vue"
	import getCodeMsg from "@/js_sdk/ErrorCode.js"
	import freePopup from "@/components/free-ui/free-popup.vue"
	
	var _this;
	var JIM=getApp().globalData.JIM;
	var SERVER_API=getApp().globalData.SERVER_API;
	var music = null;
	music = uni.createInnerAudioContext(); //创建播放器对象
	music.src= "/static/audio/message.mp3"; //选择播放的音频
	export default {
		components:{
			freeNavBar,
			freeMediaList,
			freePopup
		},
		data() {
			return {
				propIndex:-1,
				menus:[
					{
						name:"设为置顶",
						event:"setTop"
					},
					{
						name:"删除该聊天",
						event:"delChat"
					}
				],
				list:[],
				myUsername:'',
			}
		},
		onLoad() {
			uni.$on("JIMinit",function(){
				_this.isLogin();
			})
			uni.$on("reInit",function(){
				_this.isLogin();
			})
			uni.$on("get_index_msg",function(){
				//获取会话列表
				JIM.getConversation().onSuccess(function(data) {
					console.log('success:Conversation222222===========' + JSON.stringify(data));
					_this.list=data.conversations.reverse();
					var tokenList=[]
					var len=_this.list.length;
					for(var i =0;i<len;i++){
						if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
							_this.getPic(_this.list[i].avatar,i)
						}else{
							tokenList.push(_this.list[i].username)
						}
					}
					var userData = uni.getStorageSync("setUserData")
					var token = userData.token
					if(tokenList.length>0){
						uni.request({
							url:SERVER_API+'appUser/getUserPhotoByToken',
							data:tokenList,
							header:{
								token:token
							},
							method:"POST",
							success(res){
								console.log(res)
								for(var i=0;i<len;i++){
									if(_this.list[i].type==3){//是单聊
										var name= _this.list[i].username;
										_this.list[i].avatar=res.data.result[name]
									}	
								}
							}
						})
					}
					uni.hideLoading()
				}).onFail(function(data) {
					uni.showToast({
						"title":getCodeMsg(data.code),
						"position":"bottom"
					})
				});
			})
		},
		onUnload(){
			uni.$off("get_index_msg")
			uni.$off("JIMinit")
			uni.$off("reInit")
		},
		onShow() {
			_this= this;
			_this.isLogin()
			if(JIM.isLogin()){
				// uni.showLoading({
				// 	title:"读取消息列表中..."
				// })
				
				//获取会话列表
				JIM.getConversation().onSuccess(function(data) {
					console.log('success:Conversation222222===========' + JSON.stringify(data));
					_this.list=data.conversations.reverse();
					var tokenList=[]
					var len=_this.list.length;
					for(var i =0;i<len;i++){
						if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
							_this.getPic(_this.list[i].avatar,i)
						}else{
							tokenList.push(_this.list[i].username)
						}
					}
					var userData = uni.getStorageSync("setUserData")
					var token = userData.token
					if(tokenList.length>0){
						uni.request({
							url:SERVER_API+'appUser/getUserPhotoByToken',
							data:tokenList,
							header:{
								token:token
							},
							method:"POST",
							success(res){
								console.log(res)
								for(var i=0;i<len;i++){
									if(_this.list[i].type==3){//是单聊
										var name= _this.list[i].username;
										_this.list[i].avatar=res.data.result[name]
									}	
								}
							}
						})
					}
					uni.hideLoading()
				}).onFail(function(data) {
					uni.showToast({
						"title":getCodeMsg(data.code),
						"position":"bottom"
					})
				});

			}else{
				const value = uni.getStorageSync('setUserData');
				if (value) {
					//有登录信息
					console.log("已登录用户：",value);	
					if(JIM.isInit()){
						_this.login(value.username,value.password)			
					}else{
						var appkey='09970876f33e884a3624335c';
						var random_str="NkSYvAH3yAw93dqdlto47G9A35xHv4Oa";
						var timestamp=(new Date()).getTime();
						var signature;
						uni.request({
							url: SERVER_API+'appUser/getJMKey',
							header: {
								"token": '1ab5f25e6e44485fb69646158126b6f6',
								"Content-Type":"application/json"
							},
							data:{
								timestamp:timestamp
							},
							success(res) {
								console.log(res)
								signature = res.data.result;
								console.log(signature)
								JIM.init({
										  "appkey"    : appkey,
										  "random_str": random_str,
										  "signature" : signature,
										  "timestamp" : timestamp,
										  "flag":1
								}).onSuccess(function(data) {
									console.log('Init-success:' + JSON.stringify(data));	
									_this.login(value.username,value.password)	
								}).onFail(function(data) {
								    uni.showToast({
								    	"title":getCodeMsg(data.code),
								    	"position":"bottom"
								    })	    
								});
							}
						})
					}		
				}
			}
		},
 		computed:{
			// 动态获取菜单高度
			getMenusHeight(){
				let H = 100
				return this.menus.length * H
			},
			// 获取菜单的样式
			getMenusStyle(){
				return `height: ${this.getMenusHeight}rpx;`
			},
			isTop(){
				return function(username){
					if(uni.getStorageSync(username+"isTop")){
						return uni.getStorageSync(username+"isTop")
					}else{
						return false;
					}
				}
			}
		},
		mounted() {

		},
		methods: {
			getPic(media_id,index){
				console.log(media_id+"=="+index)
				JIM.getResource({
					'media_id' : media_id,
				}).onSuccess(function(res) {
					_this.list[index].avatar=res.url;
				}).onFail(function(res) {
					uni.showToast({
						"title":getCodeMsg(res.code),
						"position":"bottom"
					})
				});
			},
			async login(username,password){
				_this.myUsername = username;
				uni.showLoading({
					title:"读取消息列表中..."
				})
				JIM.login({
				    'username' :username,
					'password':password
				}).onSuccess(function(data) {		
					
				    JIM.onMsgReceive( async function(data) {
						console.log("在线========"+JSON.stringify(data)+"===================================")
					
						var noDisturb = false;
						for(var i=0;i<data.messages.length;i++){
							var content = data.messages[i].content;
							var type = data.messages[i].msg_type;
							var latest_msg,list,username,gid;
							// 分类型进行判断
							if(content.msg_type=="text"){
								latest_msg = content.msg_body.text;
							}
							if(content.msg_type=="image"){
								latest_msg = "[图片]"
							}
							if(content.msg_type=="file"){
								if(content.msg_body.extras.isAudio){
									latest_msg = "[语音]"
								}
								if(content.msg_body.extras.isVideo){
									latest_msg = "[短视频]"
								}
							}
							
							console.log("============"+latest_msg+"+=============")
							
							
							if(type==3){//如果是单聊消息
								username = data.messages[i].from_username;
								list = uni.getStorageSync(_this.myUsername+username);	//获取该用户的聊天记录缓存
								
								
								//如果是文字 直接push
								if(content.msg_type=="text"){
									if(list){
										list.push(content);
										console.log("======文字push")
										uni.setStorageSync(_this.myUsername+username,list);	
									}
								}else{//否则，需要查询资源url并进行替换
									_this.setPic(content.msg_body.media_id,username,content,list,3)
								}

								console.log("==========latest_mgs"+latest_msg)
							    JIM.updateConversation({
								   'username' : username,
								   'extras' : {'latest_msg':latest_msg}
								});
						
							}else if(type==4){//如果是群聊消息
							
								gid = data.messages[i].from_gid;
								if(uni.getStorageSync("noDisturb"+gid,)){
									noDisturb=true;
								}
								console.log("=============="+gid)
								console.log("group"+gid)
								list = uni.getStorageSync(_this.myUsername+gid); //获取该群聊的聊天记录缓存
								console.log(list)
								//如果是文字 直接push
								if(content.msg_type=="text"){
									if(list){
										console.log("hhh")
										list.push(content);
										uni.setStorageSync(_this.myUsername+gid,list);	
									}
									
								}else{//否则，需要查询资源url并进行替换
									_this.setPic(content.msg_body.media_id,gid,content,list,4)
								}
								
								JIM.updateConversation({
								   'gid' : gid,
								   'extras' : {'latest_msg':latest_msg}
								});
							
							}
												
						}
								
						console.log("主页通知。。。。。。。。。。。。。。。。")
						uni.$emit('get_index_msg',{})				
						
						if(type==3){
							console.log("通知333333333333333333")
							uni.$emit('get_chat_msg',{})//通知单聊页面刷新获取数据
						}else if(type==4){
							console.log("通知444444444444444444444444")
							uni.$emit('get_group_msg',{})//通知群聊页面属性获取数据
							
						}
						
						if(!noDisturb){
							//消息来了响铃
							music.play(); //执行播放
							//消息来了震动
							uni.vibrateLong({
							    success: function () {
							        console.log('success');
							    }
							});
						}
				    });
					
					
					JIM.onSyncConversation(async function(data) { //离线消息同步监听
						console.log("SSSSSSSSSSSSSSSSSS"+JSON.stringify(data))
				        for(var i=0;i<data.length;i++){
				        	var latest_msg;
				        	var last_content= data[i].msgs[data[i].msgs.length-1].content;
				        	// 分类型进行判断
				        	if(last_content.msg_type=="text"){
				        		latest_msg = last_content.msg_body.text;
				        	}
				        	if(last_content.msg_type=="image"){
				        		latest_msg = "[图片]"
				        	}
				        	if(last_content.msg_type=="file"){
				        		if(last_content.msg_body.extras.isAudio){
				        			latest_msg = "[语音]"
				        		}
				        		if(last_content.msg_body.extras.isVideo){
				        			latest_msg = "[短视频]"
				        		}
				        	}
				        	
				        	
				        	if(data[i].msg_type==3){//如果是单聊
				        		var username = data[i].from_username
				        		var list = uni.getStorageSync(_this.myUsername+username);//获取该对象的聊天记录
				        		
				        		//遍历该用户的消息
				        		for(var j=0;j<data[i].msgs.length;j++){
				        			var content = data[i].msgs[j].content;
				        			if(content.msg_type=="text"){//如果是文字直接push
				        				if(list){
				        					list.push(content);
				        					uni.setStorageSync(_this.myUsername+username,list);	
				        				}
				        			}else{//或者还要获取资源url进行替换
				        				_this.setPic(content.msg_body.media_id,username,content,list,3)
				        			}
				        		}	
				        		//更新会话，将最后一条消息存入
				        		JIM.updateConversation({
				        		 'username' : username,
				        		 'extras' : {'latest_msg':latest_msg}
				        		});	 
				        	}else if(data[i].msg_type==4){//如果是群聊
				        		var gid = data[i].from_gid
				        		var list = uni.getStorageSync(_this.myUsername+gid);//获取该对象的聊天记录
				        		
				        		//遍历该群的消息
				        		for(var j=0;j<data[i].msgs.length;j++){
				        			var content = data[i].msgs[j].content;
				        			if(content.msg_type=="text"){//如果是文字直接push
				        				if(list){
				        					list.push(content);
				        					uni.setStorageSync(_this.myUsername+gid,list);	
				        				}
				        			}else{//或者不是文字还要获取资源url进行替换
				        				_this.setPic(content.msg_body.media_id,gid,content,list,4)
				        			}
				        		}	
				        		//更新会话，将最后一条消息存入
				        		JIM.updateConversation({
				        		 'gid' : gid,
				        		 'extras' : {'latest_msg':latest_msg}
				        		});	 
				        	}
				        
				        }
						
						var conversationTimer = setTimeout(()=>{
							//获取会话列表
							JIM.getConversation().onSuccess(function(data) {
								console.log('success:Conversation222222===========' + JSON.stringify(data));
								_this.list=data.conversations.reverse();
								var tokenList=[]
								var len=_this.list.length;
								for(var i =0;i<len;i++){
									if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
										_this.getPic(_this.list[i].avatar,i)
									}else{
										tokenList.push(_this.list[i].username)
									}
								}
								var userData = uni.getStorageSync("setUserData")
								var token = userData.token
								tokenList.push(token)
								if(tokenList.length>0){
									uni.request({
										url:SERVER_API+'appUser/getUserPhotoByToken',
										data:tokenList,
										header:{
											token:token
										},
										method:"POST",
										success(res){
											console.log(res)
											for(var i=0;i<len-1;i++){
												if(_this.list[i].type==3){//是单聊
													var name= _this.list[i].username;
													_this.list[i].avatar=res.data.result[name]
												}	
											}
											userData.avatar = res.data.result[token];
											uni.setStorageSync('setUserData',userData)
										}
									})
								}
								uni.hideLoading()
							}).onFail(function(data) {
								uni.showToast({
									"title":getCodeMsg(data.code),
									"position":"bottom"
								})
							});
							clearTimeout(conversationTimer)
						},500)
						
				    });
					
					//获取会话列表
					JIM.getConversation().onSuccess(function(data) {
						console.log('success:Conversation222222===========' + JSON.stringify(data));
						_this.list=data.conversations.reverse();
						var tokenList=[]
						var len=_this.list.length;
						for(var i =0;i<len;i++){
							if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
								_this.getPic(_this.list[i].avatar,i)
							}else{
								tokenList.push(_this.list[i].username)
							}
						}
						var userData = uni.getStorageSync("setUserData")
						var token = userData.token
						tokenList.push(token)
						if(tokenList.length>0){
							uni.request({
								url:SERVER_API+'appUser/getUserPhotoByToken',
								data:tokenList,
								header:{
									token:token
								},
								method:"POST",
								success(res){
									console.log(res)
									for(var i=0;i<len-1;i++){
										if(_this.list[i].type==3){//是单聊
											var name= _this.list[i].username;
											_this.list[i].avatar=res.data.result[name]
										}	
									}
									userData.avatar = res.data.result[token];
									uni.setStorageSync('setUserData',userData)
								}
							})
						}
						uni.hideLoading()
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":"bottom"
						})
					});
					
				}).onFail(function(data) {
				     console.log('error:' + JSON.stringify(data));
					 uni.showToast({
					 	icon: 'none',
					 	position: 'bottom',
					 	title: getCodeMsg(data.code)
					 });					 
				}).onTimeout(function(data) {
				    console.log('timeout:' + JSON.stringify(data));
					uni.showToast({
						icon: 'none',
						position: 'bottom',
						title: '登录超时！'
					});					
				});		
			},
			isLogin(){
				//判断缓存中是否登录过，直接登录
				try {
					const value = uni.getStorageSync('setUserData');
					if (value) {
						//有登录信息
						console.log("已登录用户：",value);	
						if(!JIM.isLogin()){
							_this.login(value.username,value.password)			
						}
					}else{
						uni.reLaunch({
							url: '../../login/login',
						});
					}
				} catch (e) {
					// error
				} 
			},
			
			setPic(media_id,username,content,list,type){
				JIM.getResource({
					'media_id' : media_id,
				}).onSuccess(function(data) {
					uni.downloadFile({
						url: data.url,
						success: (res) => {
							if (res.statusCode === 200) {	
								uni.saveFile({
									tempFilePath: res.tempFilePath,
									success: function (res) {
										var savedFilePath = plus.io.convertLocalFileSystemURL(res.savedFilePath);
										content.msg_body.media_id=savedFilePath;
										if(list){
											list.push(content);
											console.log("===============资源push")
											uni.setStorageSync(_this.myUsername+username,list);	
											if(type==3){
												uni.$emit('get_chat_msg',{})//通知单聊页面刷新获取数据
											}else if(type==4){
												uni.$emit('get_group_msg',{})//通知群聊页面属性获取数据
												
											}
											
										}
									}
								});
							}
						}
					});	
				}).onFail(function(data) {
					uni.showToast({
						"title":getCodeMsg(data.code),
						"position":"bottom"
					})
				});	
			},
			long({x,y,index}){
				// 初始化 索引
				this.propIndex = index
				// 拿到当前对象
				let item = this.list[index]
				if(item.type==3){
					var isTop = uni.getStorageSync(item.username+"isTop")||false;
					// 判断之前是否处于置顶状态
					this.menus[0].name = isTop ? '取消置顶' : '设为置顶'
				}else if(item.type==4){
					var isTop = uni.getStorageSync(item.gid+"isTop")||false;
					// 判断之前是否处于置顶状态
					this.menus[0].name = isTop ? '取消置顶' : '设为置顶'
				}
				
				
				this.$refs.extend.show(x,y)
			},
			// 分发菜单事件
			clickEvent(event){
				switch (event){
					case "setTop": // 置顶/取消置顶会话
					this.setTop()
						break;
					case "delChat": // 删除当前会话
					this.delChat()
						break;
				}
				this.$refs.extend.hide()
			},
			// 删除当前会话
			delChat(){
				let item = this.list[this.propIndex]
				this.list.splice(this.propIndex,1)
				if(item.type==3){
					JIM.updateConversation({
					   'username' : item.username,
					   'extras' : {'del':true}
					});
				}else if(item.type==4){
					JIM.updateConversation({
					   'gid' : item.gid,
					   'extras' : {'del':true}
					});
				}
				
			},
			// 置顶/取消置顶会话
			setTop(){
				let item = this.list[this.propIndex]
				if(item.type==3){
					var isTop = uni.getStorageSync(item.username+"isTop")||false;
					uni.setStorageSync(item.username+"isTop",!isTop);
					//获取会话列表
					JIM.getConversation().onSuccess(function(data) {
						console.log('success:Conversation222222===========' + JSON.stringify(data));
						_this.list=data.conversations.reverse();
						var tokenList=[]
						var len=_this.list.length;
						for(var i =0;i<len;i++){
							if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
								_this.getPic(_this.list[i].avatar,i)
							}else{
								tokenList.push(_this.list[i].username)
							}
						}
						var userData = uni.getStorageSync("setUserData")
						var token = userData.token
						if(tokenList.length>0){
							uni.request({
								url:SERVER_API+'appUser/getUserPhotoByToken',
								data:tokenList,
								header:{
									token:token
								},
								method:"POST",
								success(res){
									console.log(res)
									for(var i=0;i<len;i++){
										if(_this.list[i].type==3){//是单聊
											var name= _this.list[i].username;
											_this.list[i].avatar=res.data.result[name]
										}	
									}
								}
							})
						}
						uni.hideLoading()
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":"bottom"
						})
					});
				}else if(item.type==4){
					var isTop = uni.getStorageSync(item.gid+"isTop")||false;
					uni.setStorageSync(item.gid+"isTop",!isTop);
					//获取会话列表
					JIM.getConversation().onSuccess(function(data) {
						console.log('success:Conversation222222===========' + JSON.stringify(data));
						_this.list=data.conversations.reverse();
						var tokenList=[]
						var len=_this.list.length;
						for(var i =0;i<len;i++){
							if(_this.list[i].type==4&&_this.list[i].avatar){//是群聊并且有头像就要获取头像地址
								_this.getPic(_this.list[i].avatar,i)
							}else{
								tokenList.push(_this.list[i].username)
							}
						}
						var userData = uni.getStorageSync("setUserData")
						var token = userData.token
						if(tokenList.length>0){
							uni.request({
								url:SERVER_API+'appUser/getUserPhotoByToken',
								data:tokenList,
								header:{
									token:token
								},
								method:"POST",
								success(res){
									console.log(res)
									for(var i=0;i<len;i++){
										if(_this.list[i].type==3){//是单聊
											var name= _this.list[i].username;
											_this.list[i].avatar=res.data.result[name]
										}	
									}
								}
							})
						}
						uni.hideLoading()
					}).onFail(function(data) {
						uni.showToast({
							"title":getCodeMsg(data.code),
							"position":"bottom"
						})
					});
				}
				
			}
		}
	}
</script>

<style>
	.noConversation{
		width: 750rpx;
		height: 500rpx;
		margin-top: 100rpx;
	}
</style>
