<template>
	<view>
		
		
		<!-- 导航栏 -->
		<free-nav-bar title="仿微信" :noreadnum="1">
		</free-nav-bar>
		
		
		<!-- 置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="item.extras.istop&&!item.extras.del" :item="item" :index="index"
			@long="long"></free-media-list>
		</block>
		
		<!-- 非置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="!item.extras.istop&&!item.extras.del" :item="item" :index="index"
			@long="long"></free-media-list>
		</block>
		
		
		<!-- 弹出层 -->
		<free-popup ref="extend" :bodyWidth="240" :bodyHeight="getMenusHeight">
			<view class="flex flex-column" 
			style="width: 240rpx;"
			:style="getMenusStyle">
				<view class="flex-1 flex align-center" 
				v-for="(item,index) in menus"
				:key="index"
				@click="clickEvent(item.event)">
					<text class="font-md pl-3">{{item.name}}</text>
				</view>
			</view>
		</free-popup>
		
		
	</view>
</template>

<script>
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeMediaList from "@/components/free-ui/free-media-list.vue"
	
	import freePopup from "@/components/free-ui/free-popup.vue"
	import getCodeMsg from "@/js_sdk/ErrorCode.js"
	
	var _this;
	var JIM=getApp().globalData.JIM;
	
	export default {
		components:{
			freeNavBar,
			freeMediaList,
			freePopup
		},
		data() {
			return {
				propIndex:-1,
				menus:[
					{
						name:"设为置顶",
						event:"setTop"
					},
					{
						name:"删除该聊天",
						event:"delChat"
					}
				],
				list:[]
			}
		},
		onLoad() {
		
		},
		onShow() {
			_this= this;
			if(JIM.isLogin()){
				// uni.showLoading({
				// 	title:"读取消息列表中..."
				// })
				//获取会话列表
				JIM.getConversation().onSuccess(function(data) {
					console.log('success:Conversation222222===========' + JSON.stringify(data));
					_this.list=data.conversations;
					uni.hideLoading()
				}).onFail(function(data) {
					console.log('error:' + JSON.stringify(data));
				});
				
				
			}else{
				const value = uni.getStorageSync('setUserData');
				if (value) {
					//有登录信息
					console.log("已登录用户：",value);	
					_this.login(value.username,value.password)					
				}
			}
		},
 		computed:{
			// 动态获取菜单高度
			getMenusHeight(){
				let H = 100
				return this.menus.length * H
			},
			// 获取菜单的样式
			getMenusStyle(){
				return `height: ${this.getMenusHeight}rpx;`
			}
		},
		mounted() {
			_this= this;
			uni.$on("JIMinit",function(){
				console.log("hhhhhhhhhhhhhhhJIMinit")
				_this.isLogin();
			})
			uni.$on("reInit",function(){
				console.log("zzzzzzzzzzzzzreInit")
				_this.isLogin();
			})
		},
		methods: {
			login(username,password){
				uni.showLoading({
					title:"读取消息列表中..."
				})
				JIM.login({
				    'username' :username,
					'password':password
				}).onSuccess(function(data) {		
					
				    JIM.onMsgReceive(function(data) {
						console.log(JSON.stringify(data)+"===================================")
						for(var i=0;i<data.messages.length;i++){
							var content = data.messages[i].content;
							var latest_msg;
							var username = data.messages[i].from_username;
							// 分类型进行判断
							if(content.msg_type=="text"){
								latest_msg = content.msg_body.text;
							}
							JIM.updateConversation({
							   'username' : username,
							   'extras' : {'istop':false,'del':false,'latest_msg':latest_msg}
							});
							var list = uni.getStorageSync(username);
							if(list){
								list.push(content);
								uni.setStorageSync(username,list);	
							}
						}
				        data = JSON.stringify(data);						
				        console.log('msg_receive:' + data);		
			
						//获取会话列表
						JIM.getConversation().onSuccess(function(data) {
							console.log('success:Conversation33333333===========' + JSON.stringify(data));
							_this.list=data.conversations;
							uni.hideLoading()
						}).onFail(function(data) {
							console.log('error:' + JSON.stringify(data));
						});	
			
						uni.$emit('get_msg',{})
						
						
				    });
					
				    JIM.onEventNotification(function(data) {
				        console.log('event_receive: ' + JSON.stringify(data));
				    });
					
					JIM.onSyncConversation(function(data) { //离线消息同步监听
				        for(var i=0;i<data.length;i++){
				        	var latest_msg;
				        	var last_content= data[i].msgs[data[i].msgs.length-1].content;
				        	var username = data[i].from_username
				        	// 分类型进行判断
				        	if(last_content.msg_type=="text"){
				        		latest_msg = last_content.msg_body.text;
				        	}
				        	JIM.updateConversation({
				        	   'username' : username,
				        	   'extras' : {'istop':false,'del':false,'latest_msg':latest_msg}
				        	});
				        	var list = uni.getStorageSync(username);
				        	for(var j=0;j<data[i].msgs.length;j++){
				        		list.push(data[i].msgs[j].content);
				        	}
				        	uni.setStorageSync(username,list);							
				        }
						
						var conversationTimer = setTimeout(()=>{
							//获取会话列表
							JIM.getConversation().onSuccess(function(data) {
								console.log('success:Conversation3333===========' + JSON.stringify(data));
								_this.list=data.conversations;
								uni.hideLoading()
							}).onFail(function(data) {
								console.log('error:' + JSON.stringify(data));
							});
							clearTimeout(conversationTimer)
						},500)
						
				    });
					
				    JIM.onUserInfUpdate(function(data) {
				        console.log('onUserInfUpdate : ' + JSON.stringify(data));
				    });
					 
				    JIM.onSyncEvent(function(data) {
				        console.log('onSyncEvent : ' + JSON.stringify(data));
				    });
					
					JIM.onMsgReceiptChange(function(data){
					    console.log('onMsgReceiptChange : ' + JSON.stringify(data));
					});
					
					JIM.onSyncMsgReceipt(function(data){
					    console.log('onSyncMsgReceipt : ' + JSON.stringify(data));				
					});
					
					JIM.onMutiUnreadMsgUpdate(function(data){
					    console.log('onConversationUpdate : ' + JSON.stringify(data));				
					});
					
				    JIM.onTransMsgRec(function(data){
					    console.log('onTransMsgRec : ' + JSON.stringify(data));
					});
					
					JIM.onRoomMsg (function(data){
					    console.log('onRoomMsg  : ' + JSON.stringify(data));
					});			
					
					
					//获取会话列表
					JIM.getConversation().onSuccess(function(data) {
						console.log('success:Conversation===========' + JSON.stringify(data));
						_this.list=data.conversations;
						uni.hideLoading()
					}).onFail(function(data) {
						console.log('error:' + JSON.stringify(data));
					});
					
				}).onFail(function(data) {
				     console.log('error:' + JSON.stringify(data));
					 uni.showToast({
					 	icon: 'none',
					 	position: 'bottom',
					 	title: getCodeMsg(data.code)
					 });					 
				}).onTimeout(function(data) {
				    console.log('timeout:' + JSON.stringify(data));
					uni.showToast({
						icon: 'none',
						position: 'bottom',
						title: '登录超时！'
					});					
				});		
			},
			isLogin(){
				//判断缓存中是否登录过，直接登录
				try {
					const value = uni.getStorageSync('setUserData');
					if (value) {
						//有登录信息
						console.log("已登录用户：",value);	
						_this.login(value.username,value.password)			
					}else{
						uni.reLaunch({
							url: '../../login/login',
						});
					}
				} catch (e) {
					// error
				} 
			},
			long({x,y,index}){
				// 初始化 索引
				this.propIndex = index
				// 拿到当前对象
				let item = this.list[index]
				// 判断之前是否处于置顶状态
				this.menus[0].name = item.extras.istop ? '取消置顶' : '设为置顶'
				
				this.$refs.extend.show(x,y)
			},
			// 分发菜单事件
			clickEvent(event){
				switch (event){
					case "setTop": // 置顶/取消置顶会话
					this.setTop()
						break;
					case "delChat": // 删除当前会话
					this.delChat()
						break;
				}
				this.$refs.extend.hide()
			},
			// 删除当前会话
			delChat(){
				let item = this.list[this.propIndex]
				this.list.splice(this.propIndex,1)
				JIM.updateConversation({
				   'username' : item.username,
				   'extras' : {'del':true}
				});
			},
			// 置顶/取消置顶会话
			setTop(){
				let item = this.list[this.propIndex]
				item.extras.istop = !item.extras.istop
				console.log(JSON.stringify(item))
				JIM.updateConversation({
				   'username' : item.username,
				   'extras' : {'istop':item.extras.istop,'latest_msg':item.extras.latest_msg}
				});
			}
		}
	}
</script>

<style>
	
</style>
